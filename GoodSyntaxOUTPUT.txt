Ryan Johnson
7071
CS 4100, Fall 2021
Compiler IDE used: Eclipse Neon
0001 
0002 
0003 MODULE goodtree;
	MODL | 	0015 | 	MODULE
--> Entering Program
	IDNT | 	0050 | 	goodtree
	SEMI | 	0036 | 	;
0004 
0005 (* This Part A test file should have NO errors! *)
0006 
0007 BEGIN
	BGIN | 	0011 | 	BEGIN
 --> Entering Block
0008 { The only statements for Part A are ASSIGNMENTS with EXPRESSIONS }
0009 
0010 total:=(27*first)+ 3.14*radius*radius;
	IDNT | 	0050 | 	total
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
    <-- Exiting Variable
	ASGN | 	0037 | 	:=
	LPAR | 	0034 | 	(
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
	ICNS | 	0051 | 	27
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
	MULT | 	0031 | 	*
         <-- Exiting Factor
	IDNT | 	0050 | 	first
         --> Entering Term
          --> Entering Factor
	RPAR | 	0035 | 	)
          <-- Exiting Factor
         <-- Exiting Term
        <-- Exiting Term
       <-- Exiting SimpleExpression
	PLUS | 	0032 | 	+
      <-- Exiting Factor
     <-- Exiting Term
	FCNS | 	0052 | 	3.14
     --> Entering SimpleExpression
      --> Entering Term
       --> Entering Factor
	MULT | 	0031 | 	*
       <-- Exiting Factor
	IDNT | 	0050 | 	radius
       --> Entering Term
        --> Entering Factor
	MULT | 	0031 | 	*
        <-- Exiting Factor
	IDNT | 	0050 | 	radius
        --> Entering Term
         --> Entering Factor
	SEMI | 	0036 | 	;
         <-- Exiting Factor
        <-- Exiting Term
       <-- Exiting Term
      <-- Exiting Term
     <-- Exiting SimpleExpression
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
0011 a :=(a+c)*(b-d)       ;
	IDNT | 	0050 | 	a
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
    <-- Exiting Variable
	ASGN | 	0037 | 	:=
	LPAR | 	0034 | 	(
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
	IDNT | 	0050 | 	a
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
	PLUS | 	0032 | 	+
         <-- Exiting Factor
        <-- Exiting Term
	IDNT | 	0050 | 	c
        --> Entering SimpleExpression
         --> Entering Term
          --> Entering Factor
	RPAR | 	0035 | 	)
          <-- Exiting Factor
         <-- Exiting Term
        <-- Exiting SimpleExpression
       <-- Exiting SimpleExpression
	MULT | 	0031 | 	*
      <-- Exiting Factor
	LPAR | 	0034 | 	(
      --> Entering Term
       --> Entering Factor
	IDNT | 	0050 | 	b
        --> Entering SimpleExpression
         --> Entering Term
          --> Entering Factor
	MINS | 	0033 | 	-
          <-- Exiting Factor
         <-- Exiting Term
	IDNT | 	0050 | 	d
         --> Entering SimpleExpression
          --> Entering Term
           --> Entering Factor
	RPAR | 	0035 | 	)
           <-- Exiting Factor
          <-- Exiting Term
         <-- Exiting SimpleExpression
        <-- Exiting SimpleExpression
	SEMI | 	0036 | 	;
       <-- Exiting Factor
      <-- Exiting Term
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
0012 
0013 d1 := -b +(b*b) - 4 * a* c / 2*a;
	IDNT | 	0050 | 	d1
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
    <-- Exiting Variable
	ASGN | 	0037 | 	:=
	MINS | 	0033 | 	-
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
	IDNT | 	0050 | 	b
	PLUS | 	0032 | 	+
      <-- Exiting Factor
     <-- Exiting Term
	LPAR | 	0034 | 	(
     --> Entering SimpleExpression
      --> Entering Term
       --> Entering Factor
	IDNT | 	0050 | 	b
        --> Entering SimpleExpression
         --> Entering Term
          --> Entering Factor
	MULT | 	0031 | 	*
          <-- Exiting Factor
	IDNT | 	0050 | 	b
          --> Entering Term
           --> Entering Factor
	RPAR | 	0035 | 	)
           <-- Exiting Factor
          <-- Exiting Term
         <-- Exiting Term
        <-- Exiting SimpleExpression
	MINS | 	0033 | 	-
       <-- Exiting Factor
      <-- Exiting Term
	ICNS | 	0051 | 	4
      --> Entering SimpleExpression
       --> Entering Term
        --> Entering Factor
	MULT | 	0031 | 	*
        <-- Exiting Factor
	IDNT | 	0050 | 	a
        --> Entering Term
         --> Entering Factor
	MULT | 	0031 | 	*
         <-- Exiting Factor
	IDNT | 	0050 | 	c
         --> Entering Term
          --> Entering Factor
	DIVD | 	0030 | 	/
          <-- Exiting Factor
	ICNS | 	0051 | 	2
          --> Entering Term
           --> Entering Factor
	MULT | 	0031 | 	*
           <-- Exiting Factor
	IDNT | 	0050 | 	a
           --> Entering Term
            --> Entering Factor
	SEMI | 	0036 | 	;
            <-- Exiting Factor
           <-- Exiting Term
          <-- Exiting Term
         <-- Exiting Term
        <-- Exiting Term
       <-- Exiting Term
      <-- Exiting SimpleExpression
     <-- Exiting SimpleExpression
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
0014 finval := this - (that*other)
	IDNT | 	0050 | 	finval
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
    <-- Exiting Variable
	ASGN | 	0037 | 	:=
	IDNT | 	0050 | 	this
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
	MINS | 	0033 | 	-
      <-- Exiting Factor
     <-- Exiting Term
	LPAR | 	0034 | 	(
     --> Entering SimpleExpression
      --> Entering Term
       --> Entering Factor
	IDNT | 	0050 | 	that
        --> Entering SimpleExpression
         --> Entering Term
          --> Entering Factor
	MULT | 	0031 | 	*
          <-- Exiting Factor
	IDNT | 	0050 | 	other
          --> Entering Term
           --> Entering Factor
	RPAR | 	0035 | 	)
           <-- Exiting Factor
          <-- Exiting Term
         <-- Exiting Term
        <-- Exiting SimpleExpression
0015 end.
	END_ | 	0012 | 	end
       <-- Exiting Factor
      <-- Exiting Term
     <-- Exiting SimpleExpression
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
	PERD | 	0048 | 	.
 <-- Exiting Block
Success.
<-- Exiting Program
Done.
