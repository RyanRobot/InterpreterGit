Ryan Johnson
7071
CS 4100, Fall 2021
Compiler IDE used: Eclipse Neon
0001 module Codegen;
	MODL | 	0015 | 	module
--> Entering Program
	IDNT | 	0050 | 	Codegen
	SEMI | 	0036 | 	;
0002 begin
	BGIN | 	0011 | 	begin
 --> Entering Block
0003 writeln("FULL TEST File for Ryan Johnson");
	WRTN | 	0009 | 	writeln
  --> Entering Statement
   --> Entering print statement
	LPAR | 	0034 | 	(
	SCNS | 	0053 | 	"FULL TEST File for Ryan Johnson"
    --> Entering String Expression
	RPAR | 	0035 | 	)
    <-- Exiting String Expression
	SEMI | 	0036 | 	;
   <-- Exiting print statement
  <-- Exiting Statement
0004 
0005 factorial := 1;
	IDNT | 	0050 | 	factorial
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
    <-- Exiting Variable
	ASGN | 	0037 | 	:=
	ICNS | 	0051 | 	1
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
      <-- Exiting Factor
	SEMI | 	0036 | 	;
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
0006 n := 5;
	IDNT | 	0050 | 	n
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
    <-- Exiting Variable
	ASGN | 	0037 | 	:=
	ICNS | 	0051 | 	5
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
      <-- Exiting Factor
	SEMI | 	0036 | 	;
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
0007 count := 1;
	IDNT | 	0050 | 	count
  --> Entering Statement
   --> Entering handleAssignment
    --> Entering Variable
    <-- Exiting Variable
	ASGN | 	0037 | 	:=
	ICNS | 	0051 | 	1
    --> Entering SimpleExpression
     --> Entering Term
      --> Entering Factor
      <-- Exiting Factor
	SEMI | 	0036 | 	;
     <-- Exiting Term
    <-- Exiting SimpleExpression
   <-- Exiting handleAssignment
  <-- Exiting Statement
0008 while count <= n do
	WHLE | 	0014 | 	while
  --> Entering Statement
   --> Entering while
	IDNT | 	0050 | 	count
    --> Entering comparison
     --> Entering SimpleExpression
      --> Entering Term
       --> Entering Factor
       <-- Exiting Factor
	LEEQ | 	0041 | 	<=
      <-- Exiting Term
     <-- Exiting SimpleExpression
     --> Entering Condition
	IDNT | 	0050 | 	n
     <-- Exiting Condition
     --> Entering SimpleExpression
      --> Entering Term
       --> Entering Factor
       <-- Exiting Factor
	_DO_ | 	0003 | 	do
      <-- Exiting Term
     <-- Exiting SimpleExpression
    <-- Exiting comparison
0009   begin
	BGIN | 	0011 | 	begin
    --> Entering Block
0010   factorial := factorial*count;
	IDNT | 	0050 | 	factorial
     --> Entering Statement
      --> Entering handleAssignment
       --> Entering Variable
       <-- Exiting Variable
	ASGN | 	0037 | 	:=
	IDNT | 	0050 | 	factorial
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
         <-- Exiting Factor
	MULT | 	0031 | 	*
	IDNT | 	0050 | 	count
         --> Entering Term
          --> Entering Factor
          <-- Exiting Factor
	SEMI | 	0036 | 	;
         <-- Exiting Term
        <-- Exiting Term
       <-- Exiting SimpleExpression
      <-- Exiting handleAssignment
     <-- Exiting Statement
0011   count := count + 1
	IDNT | 	0050 | 	count
     --> Entering Statement
      --> Entering handleAssignment
       --> Entering Variable
       <-- Exiting Variable
	ASGN | 	0037 | 	:=
	IDNT | 	0050 | 	count
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
         <-- Exiting Factor
	PLUS | 	0032 | 	+
        <-- Exiting Term
	ICNS | 	0051 | 	1
        --> Entering SimpleExpression
         --> Entering Term
          --> Entering Factor
          <-- Exiting Factor
0012   end;
	END_ | 	0012 | 	end
         <-- Exiting Term
        <-- Exiting SimpleExpression
       <-- Exiting SimpleExpression
      <-- Exiting handleAssignment
     <-- Exiting Statement
	SEMI | 	0036 | 	;
    <-- Exiting Block
   <-- Exiting while
  <-- Exiting Statement
0013 writeln("The calculation of 5! is:");
	WRTN | 	0009 | 	writeln
  --> Entering Statement
   --> Entering print statement
	LPAR | 	0034 | 	(
	SCNS | 	0053 | 	"The calculation of 5! is:"
    --> Entering String Expression
	RPAR | 	0035 | 	)
    <-- Exiting String Expression
	SEMI | 	0036 | 	;
   <-- Exiting print statement
  <-- Exiting Statement
0014 writeln(factorial);
	WRTN | 	0009 | 	writeln
  --> Entering Statement
   --> Entering print statement
	LPAR | 	0034 | 	(
	IDNT | 	0050 | 	factorial
    --> Entering String Expression
     --> Entering SimpleExpression
      --> Entering Term
       --> Entering Factor
       <-- Exiting Factor
	RPAR | 	0035 | 	)
      <-- Exiting Term
     <-- Exiting SimpleExpression
    <-- Exiting String Expression
	SEMI | 	0036 | 	;
   <-- Exiting print statement
  <-- Exiting Statement
0015 writeln(" ");
	WRTN | 	0009 | 	writeln
  --> Entering Statement
   --> Entering print statement
	LPAR | 	0034 | 	(
	SCNS | 	0053 | 	" "
    --> Entering String Expression
	RPAR | 	0035 | 	)
    <-- Exiting String Expression
	SEMI | 	0036 | 	;
   <-- Exiting print statement
  <-- Exiting Statement
0016 
0017 {count should be 6 at this point}
0018 while count > 1 do
	WHLE | 	0014 | 	while
  --> Entering Statement
   --> Entering while
	IDNT | 	0050 | 	count
    --> Entering comparison
     --> Entering SimpleExpression
      --> Entering Term
       --> Entering Factor
       <-- Exiting Factor
	GRTR | 	0038 | 	>
      <-- Exiting Term
     <-- Exiting SimpleExpression
     --> Entering Condition
	ICNS | 	0051 | 	1
     <-- Exiting Condition
     --> Entering SimpleExpression
      --> Entering Term
       --> Entering Factor
       <-- Exiting Factor
	_DO_ | 	0003 | 	do
      <-- Exiting Term
     <-- Exiting SimpleExpression
    <-- Exiting comparison
0019   begin
	BGIN | 	0011 | 	begin
    --> Entering Block
0020   writeln(count);
	WRTN | 	0009 | 	writeln
     --> Entering Statement
      --> Entering print statement
	LPAR | 	0034 | 	(
	IDNT | 	0050 | 	count
       --> Entering String Expression
        --> Entering SimpleExpression
         --> Entering Term
          --> Entering Factor
          <-- Exiting Factor
	RPAR | 	0035 | 	)
         <-- Exiting Term
        <-- Exiting SimpleExpression
       <-- Exiting String Expression
	SEMI | 	0036 | 	;
      <-- Exiting print statement
     <-- Exiting Statement
0021   if count - 2 > 2 then
	_IF_ | 	0004 | 	if
     --> Entering Statement
      --> Entering if statement
	IDNT | 	0050 | 	count
       --> Entering comparison
        --> Entering SimpleExpression
         --> Entering Term
          --> Entering Factor
          <-- Exiting Factor
	MINS | 	0033 | 	-
         <-- Exiting Term
	ICNS | 	0051 | 	2
         --> Entering SimpleExpression
          --> Entering Term
           --> Entering Factor
           <-- Exiting Factor
	GRTR | 	0038 | 	>
          <-- Exiting Term
         <-- Exiting SimpleExpression
        <-- Exiting SimpleExpression
        --> Entering Condition
	ICNS | 	0051 | 	2
        <-- Exiting Condition
        --> Entering SimpleExpression
         --> Entering Term
          --> Entering Factor
          <-- Exiting Factor
	THEN | 	0005 | 	then
         <-- Exiting Term
        <-- Exiting SimpleExpression
       <-- Exiting comparison
0022     writeln("Count - 2 is greater than 0")
	WRTN | 	0009 | 	writeln
       --> Entering Statement
        --> Entering print statement
	LPAR | 	0034 | 	(
	SCNS | 	0053 | 	"Count - 2 is greater than 0"
         --> Entering String Expression
	RPAR | 	0035 | 	)
         <-- Exiting String Expression
0023   else
	ELSE | 	0006 | 	else
        <-- Exiting print statement
       <-- Exiting Statement
0024     writeln("Count - 2 is less than or equal to 0");
	WRTN | 	0009 | 	writeln
       --> Entering Statement
        --> Entering print statement
	LPAR | 	0034 | 	(
	SCNS | 	0053 | 	"Count - 2 is less than or equal to 0"
         --> Entering String Expression
	RPAR | 	0035 | 	)
         <-- Exiting String Expression
	SEMI | 	0036 | 	;
        <-- Exiting print statement
       <-- Exiting Statement
      <-- Exiting if statement
     <-- Exiting Statement
0025   count := count -1
	IDNT | 	0050 | 	count
     --> Entering Statement
      --> Entering handleAssignment
       --> Entering Variable
       <-- Exiting Variable
	ASGN | 	0037 | 	:=
	IDNT | 	0050 | 	count
       --> Entering SimpleExpression
        --> Entering Term
         --> Entering Factor
         <-- Exiting Factor
	MINS | 	0033 | 	-
        <-- Exiting Term
	ICNS | 	0051 | 	1
        --> Entering SimpleExpression
         --> Entering Term
          --> Entering Factor
          <-- Exiting Factor
0026   end;
	END_ | 	0012 | 	end
         <-- Exiting Term
        <-- Exiting SimpleExpression
       <-- Exiting SimpleExpression
      <-- Exiting handleAssignment
     <-- Exiting Statement
	SEMI | 	0036 | 	;
    <-- Exiting Block
   <-- Exiting while
  <-- Exiting Statement
0027 writeln(" ");
	WRTN | 	0009 | 	writeln
  --> Entering Statement
   --> Entering print statement
	LPAR | 	0034 | 	(
	SCNS | 	0053 | 	" "
    --> Entering String Expression
	RPAR | 	0035 | 	)
    <-- Exiting String Expression
	SEMI | 	0036 | 	;
   <-- Exiting print statement
  <-- Exiting Statement
0028 writeln("All done.")
	WRTN | 	0009 | 	writeln
  --> Entering Statement
   --> Entering print statement
	LPAR | 	0034 | 	(
	SCNS | 	0053 | 	"All done."
    --> Entering String Expression
	RPAR | 	0035 | 	)
    <-- Exiting String Expression
0029 end. 
	END_ | 	0012 | 	end
   <-- Exiting print statement
  <-- Exiting Statement
	PERD | 	0048 | 	.
 <-- Exiting Block
Success.
<-- Exiting Program
PC = 0: PRINT 2 0 0
"FULL TEST File for Ryan Johnson": "FULL TEST File for Ryan Johnson"
PC = 1: MOV 4 0 3
PC = 2: MOV 6 0 5
PC = 3: MOV 4 0 7
PC = 4: SUB 7 5 8
PC = 5: BP 8 0 9
PC = 6: MUL 3 7 11
PC = 7: MOV 11 0 3
PC = 8: ADD 7 4 12
PC = 9: MOV 12 0 7
PC = 10: BINDR 0 0 10
PC = 4: SUB 7 5 8
PC = 5: BP 8 0 9
PC = 6: MUL 3 7 11
PC = 7: MOV 11 0 3
PC = 8: ADD 7 4 12
PC = 9: MOV 12 0 7
PC = 10: BINDR 0 0 10
PC = 4: SUB 7 5 8
PC = 5: BP 8 0 9
PC = 6: MUL 3 7 11
PC = 7: MOV 11 0 3
PC = 8: ADD 7 4 12
PC = 9: MOV 12 0 7
PC = 10: BINDR 0 0 10
PC = 4: SUB 7 5 8
PC = 5: BP 8 0 9
PC = 6: MUL 3 7 11
PC = 7: MOV 11 0 3
PC = 8: ADD 7 4 12
PC = 9: MOV 12 0 7
PC = 10: BINDR 0 0 10
PC = 4: SUB 7 5 8
PC = 5: BP 8 0 9
PC = 6: MUL 3 7 11
PC = 7: MOV 11 0 3
PC = 8: ADD 7 4 12
PC = 9: MOV 12 0 7
PC = 10: BINDR 0 0 10
PC = 4: SUB 7 5 8
PC = 5: BP 8 0 9
PC = 11: PRINT 13 0 0
"The calculation of 5! is:": "The calculation of 5! is:"
PC = 12: PRINT 3 0 0
factorial: 120
PC = 13: PRINT 14 0 0
" ": " "
PC = 14: SUB 7 4 12
PC = 15: BNP 12 0 15
PC = 16: PRINT 7 0 0
count: 6
PC = 17: SUB 7 17 18
PC = 18: SUB 18 17 18
PC = 19: BNP 18 0 19
PC = 20: PRINT 20 0 0
"Count - 2 is greater than 0": "Count - 2 is greater than 0"
PC = 21: BINDR 0 0 21
PC = 23: SUB 7 4 23
PC = 24: MOV 23 0 7
PC = 25: BINDR 0 0 16
PC = 14: SUB 7 4 12
PC = 15: BNP 12 0 15
PC = 16: PRINT 7 0 0
count: 5
PC = 17: SUB 7 17 18
PC = 18: SUB 18 17 18
PC = 19: BNP 18 0 19
PC = 20: PRINT 20 0 0
"Count - 2 is greater than 0": "Count - 2 is greater than 0"
PC = 21: BINDR 0 0 21
PC = 23: SUB 7 4 23
PC = 24: MOV 23 0 7
PC = 25: BINDR 0 0 16
PC = 14: SUB 7 4 12
PC = 15: BNP 12 0 15
PC = 16: PRINT 7 0 0
count: 4
PC = 17: SUB 7 17 18
PC = 18: SUB 18 17 18
PC = 19: BNP 18 0 19
PC = 22: PRINT 22 0 0
"Count - 2 is less than or equal to 0": "Count - 2 is less than or equal to 0"
PC = 23: SUB 7 4 23
PC = 24: MOV 23 0 7
PC = 25: BINDR 0 0 16
PC = 14: SUB 7 4 12
PC = 15: BNP 12 0 15
PC = 16: PRINT 7 0 0
count: 3
PC = 17: SUB 7 17 18
PC = 18: SUB 18 17 18
PC = 19: BNP 18 0 19
PC = 22: PRINT 22 0 0
"Count - 2 is less than or equal to 0": "Count - 2 is less than or equal to 0"
PC = 23: SUB 7 4 23
PC = 24: MOV 23 0 7
PC = 25: BINDR 0 0 16
PC = 14: SUB 7 4 12
PC = 15: BNP 12 0 15
PC = 16: PRINT 7 0 0
count: 2
PC = 17: SUB 7 17 18
PC = 18: SUB 18 17 18
PC = 19: BNP 18 0 19
PC = 22: PRINT 22 0 0
"Count - 2 is less than or equal to 0": "Count - 2 is less than or equal to 0"
PC = 23: SUB 7 4 23
PC = 24: MOV 23 0 7
PC = 25: BINDR 0 0 16
PC = 14: SUB 7 4 12
PC = 15: BNP 12 0 15
PC = 26: PRINT 14 0 0
" ": " "
PC = 27: PRINT 24 0 0
"All done.": "All done."
PC = 28: STOP 0 0 0
Done.
